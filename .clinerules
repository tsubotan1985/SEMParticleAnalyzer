## はじめに
このドキュメントは、Cline が開発を行う際のガイドラインをまとめたものです。
このガイドラインに従って、開発を行ってください。

## ターミナル操作
- 使用するターミナルはpowershell 7
- Windowsで開発しているので、Windowsとして適切なターミナル操作
- 極力シェル統合されたシェルで操作をする。シェル統合が崩れた場合にはシェルの再起動に関して指示者に指示を仰ぐ。

## 仮想環境
- ルートディレクトリ直下にvenvというディレクトリを作成し、そこにパッケージをインストールして実行する
- 統合シェルが何らかの影響でグローバル環境に戻ってしまったら、再度仮想環境を立ち上げ

## 基本ルール

- 指示に従う:
   - 要件や指示に従って作業を進める
   - 作業の進捗や問題が発生した場合は適宜報告

- 自律的な問題解決:
   - エラーや何かしらの問題が発生したら、自律的に問題分析と解決案を提示
   - 複数のアプローチがある場合は、推奨案を明示
   - ソースコード外の問題である可能性がある場合は、指示者に報告
   - 指示者がバックアップの指示を出したらGitでローカルリポジトリにバックアップ(コミット)
   - コードの構成が崩れた場合でバックアップから復元が必要な時には必ず指示者に指示を仰ぐ。
   - 作業が2回ループした場合には、支持者に方向性の指示を仰ぐ

- 既存コードの尊重:
   - 既存のコードスタイルやパターンがある場合には、それに従う
   - 大幅な変更が必要な場合は理由を説明

- 連続で修正に失敗した場合:
   - 2回以上連続でテストを失敗した時は、現在の状況を整理して指示者に報告
   - 同じことを連続で行うのではなく、問題の解決策を提案

- さぼらない:
   - ユーザーにターミナルでの入力を動かすのではなく、あなたがターミナルを操作します。

## 技術スタック

プロジェクトで定義された技術スタックに従って開発を行います。
特に指定がない場合は、一般的なベストプラクティスに基づいて技術を選定します。


## コーディングガイドライン

### 一般原則
- シンプルで読みやすいコード
- 適切な命名（変数、関数、クラスなど）
- 一つの関数は一つの責務を持つ
- エラーハンドリングを適切に実装
- コメントは必要な箇所にのみ、最小限付ける


## コミットメッセージのガイドライン

簡潔かつ明確なコミットメッセージを記述することで、変更履歴を追いやすくします。

- feat: 新機能追加 🚀
- fix: バグ修正 🐛
- docs: ドキュメント更新 📚
- style: スタイル調整 💅
- refactor: リファクタリング ♻️
- test: テスト追加・修正 🧪
- chore: 雑務的な変更 🔧

### コミットの注意事項

- 1つのコミットでは1つの論理的な変更のみを含める
- 複数の変更がある場合は複数のコミットに分割する
- コミットメッセージは日本語で記述可能

### コミットのやり方

`git add . && git commit -m "feat: ユーザー登録機能を追加"` のようにコミットメッセージを記述してコミットしてください。

コミットは自動的にコマンドを実行せず、必ず指示者の確認を経てから行ってください。

## ベストプラクティス

- 汎用的で再利用可能なコンポーネントを作成
- 基本的なパフォーマンス最適化を実装
- 基本的なアクセシビリティ対応を実装
- Core Web Vitalsを意識した実装
